sources:
  castle:
    categories:
      Formatted Inputs:
        functions:
          sscanf:
            symbols:
              [
                sscanf,
                _sscanf,
                __builtin_sscanf,
                __isoc99_sscanf,
                __isoc23_sscanf,
              ]
            synopsis: int sscanf(const char* str, const char* format, ...)
            enabled: true
            par_cnt: "i >= 2"
            par_slice: "i >= 3"
      Database Inputs:
        functions:
          mysql_fetch_row:
            symbols: [mysql_fetch_row, _mysql_fetch_row]
            synopsis: MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          mysql_fetch_lengths:
            symbols: [mysql_fetch_lengths, _mysql_fetch_lengths]
            synopsis: unsigned long *mysql_fetch_lengths(MYSQL_RES *result)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          sqlite3_column_text:
            symbols: [sqlite3_column_text, _sqlite3_column_text]
            synopsis: const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          sqlite3_column_blob:
            symbols: [sqlite3_column_blob, _sqlite3_column_blob]
            synopsis: const void *sqlite3_column_blob(sqlite3_stmt*, int iCol)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          sqlite3_column_int:
            symbols: [sqlite3_column_int, _sqlite3_column_int]
            synopsis: int sqlite3_column_int(sqlite3_stmt*, int iCol)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          sqlite3_column_double:
            symbols: [sqlite3_column_double, _sqlite3_column_double]
            synopsis: double sqlite3_column_double(sqlite3_stmt*, int iCol)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          sqlite3_open:
            symbols: [sqlite3_open, _sqlite3_open]
            synopsis: int sqlite3_open(const char *filename, sqlite3 **ppDb)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "i == 1"
          sqlite3_step:
            symbols: [sqlite3_step, _sqlite3_step]
            synopsis: int sqlite3_step(sqlite3_stmt*)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          mysql_fetch_field:
            symbols: [mysql_fetch_field, _mysql_fetch_field]
            synopsis: MYSQL_FIELD *mysql_fetch_field(MYSQL_RES *result)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
      User Input:
        functions:
          getpass:
            symbols: [getpass, _getpass, __builtin_getpass]
            synopsis: char *getpass(const char *prompt)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          getpass_r:
            symbols: [getpass_r, _getpass_r]
            synopsis: char *getpass_r(const char *prompt)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          fgetc:
            symbols: [fgetc, _fgetc, __builtin_fgetc]
            synopsis: int fgetc(FILE* stream)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
      String Processing:
        functions:
          strtok:
            symbols: [strtok, _strtok, __builtin_strtok]
            synopsis: char *strtok(char *str, const char *delim)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          strtok_r:
            symbols: [strtok_r, _strtok_r, __builtin_strtok_r]
            synopsis: char *strtok_r(char *str, const char *delim, char **saveptr)
            enabled: true
            par_cnt: "i == 3"
            par_slice: "True"

sinks:
  castle:
    categories:
      Formatted Output:
        functions:
          printf:
            symbols: [printf, _printf, __builtin_printf]
            synopsis: int printf(const char *format, ...)
            enabled: true
            par_cnt: "i >= 1"
            par_slice: "True"
          fprintf:
            symbols: [fprintf, _fprintf, __builtin_fprintf]
            synopsis: int fprintf(FILE *stream, const char *format, ...)
            enabled: true
            par_cnt: "i >= 2"
            par_slice: "True"
          snprintf:
            symbols: [snprintf, _snprintf, __builtin_snprintf]
            synopsis: int snprintf(char *str, size_t size, const char *format, ...)
            enabled: true
            par_cnt: "i >= 3"
            par_slice: "True"
          vprintf:
            symbols: [vprintf, _vprintf, __builtin_vprintf]
            synopsis: int vprintf(const char *format, va_list ap)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          vfprintf:
            symbols: [vfprintf, _vfprintf, __builtin_vfprintf]
            synopsis: int vfprintf(FILE *stream, const char *format, va_list ap)
            enabled: true
            par_cnt: "i == 3"
            par_slice: "True"
          vsnprintf:
            symbols: [vsnprintf, _vsnprintf, __builtin_vsnprintf]
            synopsis: int vsnprintf(char *s, size_t n, const char *format, va_list ap)
            enabled: true
            par_cnt: "i == 4"
            par_slice: "i >= 2"
      Command Execution:
        functions:
          execl:
            symbols: [execl, _execl, __builtin_execl]
            synopsis: int execl(const char *path, const char *arg, ...)
            enabled: true
            par_cnt: "i >= 2"
            par_slice: "True"
          execv:
            symbols: [execv, _execv, __builtin_execv]
            synopsis: int execv(const char *path, char *const argv[])
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          execlp:
            symbols: [execlp, _execlp, __builtin_execlp]
            synopsis: int execlp(const char *file, const char *arg, ...)
            enabled: true
            par_cnt: "i >= 2"
            par_slice: "True"
          execvp:
            symbols: [execvp, _execvp, __builtin_execvp]
            synopsis: int execvp(const char *file, char *const argv[])
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          system:
            symbols: [system, _system, __builtin_system]
            synopsis: int system(const char *command)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
      Database Queries:
        functions:
          mysql_query:
            symbols: [mysql_query, _mysql_query]
            synopsis: int mysql_query(MYSQL *mysql, const char *stmt_str)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "i == 2"
          mysql_real_query:
            symbols: [mysql_real_query, _mysql_real_query]
            synopsis: int mysql_real_query(MYSQL *mysql, const char *stmt_str, unsigned long length)
            enabled: true
            par_cnt: "i == 3"
            par_slice: "i == 2"
          mysql_real_escape_string:
            symbols: [mysql_real_escape_string, _mysql_real_escape_string]
            synopsis: unsigned long mysql_real_escape_string(MYSQL *mysql, char *to, const char *from, unsigned long length)
            enabled: true
            par_cnt: "i == 4"
            par_slice: "i == 3"
          sqlite3_exec:
            symbols: [sqlite3_exec, _sqlite3_exec]
            synopsis: int sqlite3_exec(sqlite3*, const char *sql, int (*callback)(void*,int,char**,char**), void *, char **errmsg)
            enabled: true
            par_cnt: "i == 5"
            par_slice: "i == 2"
          sqlite3_prepare:
            symbols: [sqlite3_prepare, _sqlite3_prepare]
            synopsis: int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
            enabled: true
            par_cnt: "i == 5"
            par_slice: "i == 2"
          sqlite3_prepare_v2:
            symbols: [sqlite3_prepare_v2, _sqlite3_prepare_v2]
            synopsis: int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
            enabled: true
            par_cnt: "i == 5"
            par_slice: "i == 2"
      File Operations:
        functions:
          fopen:
            symbols: [fopen, _fopen, __builtin_fopen]
            synopsis: FILE* fopen(const char* pathname, const char* mode)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "i == 1"
          freopen:
            symbols: [freopen, _freopen, __builtin_freopen]
            synopsis: FILE* freopen(const char* pathname, const char* mode, FILE* stream)
            enabled: true
            par_cnt: "i == 3"
            par_slice: "i == 1"
          open:
            symbols: [open, _open, __builtin_open]
            synopsis: int open(const char *pathname, int flags, ...)
            enabled: true
            par_cnt: "i >= 2"
            par_slice: "i == 1"
          opendir:
            symbols: [opendir, _opendir, __builtin_opendir]
            synopsis: DIR* opendir(const char* name)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          remove:
            symbols: [remove, _remove, __builtin_remove]
            synopsis: int remove(const char *pathname)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          unlink:
            symbols: [unlink, _unlink, __builtin_unlink]
            synopsis: int unlink(const char *pathname)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          realpath:
            symbols: [realpath, _realpath, __builtin_realpath]
            synopsis: char *realpath(const char *path, char *resolved_path)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "i == 1"
      Output:
        functions:
          puts:
            symbols: [puts, _puts, __builtin_puts]
            synopsis: int puts(const char *s)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          fputs:
            symbols: [fputs, _fputs, __builtin_fputs]
            synopsis: int fputs(const char *s, FILE *stream)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "i == 1"
          fwrite:
            symbols: [fwrite, _fwrite, __builtin_fwrite]
            synopsis: size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
            enabled: true
            par_cnt: "i == 4"
            par_slice: "i == 1"
          putchar:
            symbols: [putchar, _putchar, __builtin_putchar]
            synopsis: int putchar(int c)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
          putc:
            symbols: [putc, _putc, __builtin_putc]
            synopsis: int putc(int c, FILE *stream)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          perror:
            symbols: [perror, _perror, __builtin_perror]
            synopsis: void perror(const char *s)
            enabled: true
            par_cnt: "i == 1"
            par_slice: "True"
      String Operations:
        functions:
          strcpy:
            symbols: [strcpy, _strcpy, __builtin_strcpy]
            synopsis: char* strcpy(char* dst, const char* src)
            enabled: true
            par_cnt: "i == 2"
            par_slice: "True"
          strncpy:
            symbols: [strncpy, _strncpy, __builtin_strncpy]
            synopsis: char* strncpy(char* s1, const char* s2, size_t n)
            enabled: true
            par_cnt: "i == 3"
            par_slice: "True"
          strncat:
            symbols: [strncat, _strncat, __builtin_strncat]
            synopsis: char* strncat(char* dst, const char* src, size_t ssize)
            enabled: true
            par_cnt: "i == 3"
            par_slice: "True"
